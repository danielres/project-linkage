// ##### cabinet cabinets #####

$steps: 20;

%cabinet__hook {
	pointer-events: all;
	display: grid;
	align-content: stretch;
	justify-content: stretch;
	max-width: none;
	@extend %emphasis;
	@include hyphens();
	border: none;
	@extend %fs0;
	font-family: $font-family-brand;
	@extend %bold;
	padding: 0;
	transform: translateY(2px);
	--c: #{$brand--color};
	box-shadow: 0 $border-size/-1 0 0 $white inset, 0 $border-size 0 0 var(--c) inset, $border-size/-1 0 0 0 $white,
		$border-size/-1 0 0 0 var(--c) inset, $border-size 0 0 0 var(--c) inset;
	a {
		display: block;
		height: 100%;
		margin: 0;
		padding: $u $u * 2;
		text-align: left;
		color: currentColor;
		* {
			margin: 0;
		}
	}
	&:hover {
		@extend %cabinet__hook--hover;
	}
	&::before {
		content: "";
		position: absolute;
		z-index: z(up);
		right: $u;
		top: $border-size;
		bottom: $border-size;
		line-height: 0;
		width: 1em;
		background-position: center;
		background-size: contain;
		background-image: url("../image/icon/icon--sw--white.svg");
	}
}

%cabinet__hook--hover {
	@include notouch {
		--c: #{$cta_color_hover};
		background-color: var(--c);
	}
}

%cabinet__hook--current {
	pointer-events: none;
	background-color: $white;
	color: $body-color;
	@extend %uppercase;
	a {
		align-self: end;
		height: auto;
	}
	@include font-smoothing(modern);
	&:hover {
		@extend %cabinet__hook--hover;
	}
	&:before {
		content: "";
	}
}
%cabinet__content--current {
	z-index: z(up) + 1;
	opacity: 1;
	max-height: none;
	overflow-y: auto;
	padding: 0 $u * 2 $u * 2;
	transition-duration: $duration, 0s;
	transition-delay: 0s, 0s;
	pointer-events: all;
	box-shadow: 0 $border-size/-1 0 0 $brand--color inset, $border-size 0 0 0 $brand--color inset,
		$border-size/-1 0 0 0 $brand--color inset;
}

[class*="cabinet--"] {
	display: grid;
	grid-template-columns: 1fr;
	grid-gap: 0px;
	max-width: 100%;
	clear: both;
	margin-block-end: $u * 2;
}

.cabinet--vertical {
	//	max-width: $line-width;
}

@include mq(large) {
	@for $n from 1 through $steps {
		.cabinet--horizontal.cabinet--#{$n} {
			grid-template-columns: repeat(#{$n}, 1fr);
		}
	}
}

.cabinet {
	&__inner {
		display: contents;
	}
	&__heading {
		grid-row: 1;
		grid-column: 1 / -1;
		margin-block-start: 0;
	}
}

[class*="cabinet__hook"] {
	margin: 0;
	@extend %cabinet__hook;
	grid-row: var(--row);
	grid-column: var(--col);
	--col: 1 / -1;
	.cabinet--horizontal & {
		@include mq(large) {
			--row: 3;
		}
		@for $n from 1 through $steps {
			@include mq(large) {
				&:nth-of-type(#{$n}) {
					--col: #{$n};
				}
			}
		}
	}
}

[class*="cabinet__content"] {
	hr {
		background-color: $brand--light;
		height: $border-size;
		background-image: none;
		margin: $u 0;
	}
	ul,
	ol {
		@extend %list;
	}
	li {
		@extend %list__item;
	}
	ol li {
		@extend %list__item--ordered;
	}
	dl {
		@extend %definition;
	}
	max-height: 0;
	opacity: 0;
	padding: 0;
	overflow: hidden;
	pointer-events: none;
	@include transition;
	transition-property: opacity, max-height;
	transition-timing-function: ease-in-out;
	transition-duration: $duration, 0s;
	transition-delay: 0s, 0s;
	//	&:first-of-type {
	//		@extend %cabinet__content--current;
	//	}
	grid-row: var(--row);
	grid-column: var(--col);
	@for $n from 1 through $steps {
		&:nth-of-type(#{$n}) {
			--row: calc(1 + (#{$n} * 3));
			--col: 1 / -1;
			@include mq(large) {
				.cabinet--horizontal & {
					--row: 4;
				}
			}
		}
	}
}

[class*="cabinet__anchor"] {
	grid-row: var(--row);
	grid-column: var(--col);
	@for $n from 1 through $steps {
		&:nth-of-type(#{$n}) {
			--row: calc(-1 + #{$n} * 3);
			--col: 1 / -1;
			@include mq(large) {
				.cabinet--horizontal & {
					--row: 1;
				}
			}
		}
	}
	&:target {
		//padding-block-start: $u * 6;
		display: block;
		overflow: hidden;
		clip: rect(0 0 0 0);
		transform: translateY(2px);
		~ .cabinet__inner {
			[class*="cabinet__content"] {
				//	&:first-of-type {
				//		opacity: 0;
				//		pointer-events: none;
				//		max-height: 0;
				//		@include mq(large) {
				// 			max-height: 50vh;
				//		}
				//	}
			}
			[class*="cabinet__hook"] {
				//	&:first-of-type {
				//	  @extend %cabinet__hook;
				//	}
			}
		}
	}
}

@for $n from 0 through $steps {
	[class*="cabinet__anchor"].cabinet__anchor--#{$n}:target {
		~ .cabinet__inner {
			.cabinet__hook--#{$n} {
				@extend %cabinet__hook--current;
			}
			[class*="cabinet__content"].cabinet__content--#{$n} {
				@extend %cabinet__content--current;
			}
		}
	}
}
